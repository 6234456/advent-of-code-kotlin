import json
import copy

input = """
[[[[3,9],[0,5]],[4,6]],3]
[[[8,[3,0]],[[8,4],[9,4]]],[[[0,9],4],[[3,8],2]]]
[3,[3,[[2,8],[1,4]]]]
[8,[[3,6],[[8,9],[4,1]]]]
[[3,[[5,8],[3,3]]],[[[9,3],[6,3]],[[7,0],[8,8]]]]
[[6,[[5,8],7]],[8,[[1,6],7]]]
[[[[8,6],[9,3]],[3,[2,7]]],[[[6,7],[2,8]],[6,7]]]
[[[9,[1,6]],0],[[7,3],[2,4]]]
[[[[4,9],3],6],[[7,5],8]]
[[[[8,3],8],[2,[6,5]]],[[6,[1,9]],[0,2]]]
[[[9,9],[[9,8],1]],[[[7,4],[1,4]],[[1,1],4]]]
[[5,[[8,2],[8,6]]],[9,[7,[8,9]]]]
[[4,6],[8,[3,[1,2]]]]
[[[2,[7,9]],7],[[2,0],[9,2]]]
[[4,9],[[[3,4],[2,9]],5]]
[[[[0,0],[3,7]],[[6,1],8]],[[[4,0],4],8]]
[[4,[[8,9],[2,2]]],[[[1,8],[2,7]],[[6,8],0]]]
[[7,5],[[7,0],1]]
[[[5,[1,0]],1],[[[7,7],[2,2]],[[4,2],8]]]
[[[7,1],[7,3]],[2,0]]
[[[[6,2],3],[3,[5,2]]],[[7,2],[[9,5],[0,1]]]]
[[[[0,3],2],6],9]
[[[9,8],[[7,8],[5,9]]],[[[4,8],[0,2]],[[6,8],[2,3]]]]
[2,[[3,7],9]]
[[[9,9],1],[7,[7,[5,8]]]]
[[8,[1,1]],[8,8]]
[[[[3,3],[1,4]],[[5,3],4]],[5,2]]
[[[[0,9],1],[[3,8],8]],[9,[[8,8],[0,7]]]]
[[[9,4],1],[[9,7],[[6,1],[9,5]]]]
[[[1,[4,0]],9],[[3,7],2]]
[[[5,[0,5]],[5,[9,2]]],[[[2,2],[8,0]],[3,[7,8]]]]
[[[[8,2],3],3],[[[5,4],[0,5]],9]]
[[[3,[6,2]],0],[[[7,3],[6,3]],[[6,3],2]]]
[[6,1],[[[1,2],2],[9,4]]]
[[[1,[9,0]],[[8,2],[4,9]]],[[0,[9,6]],[[0,4],[4,0]]]]
[9,[4,[7,0]]]
[[7,2],[[9,5],8]]
[[6,[[0,6],0]],[[[2,0],[4,1]],[[9,5],4]]]
[[[6,[0,0]],5],[[[5,2],[7,3]],[[2,8],[3,2]]]]
[[[2,7],[[8,2],2]],[[5,[0,6]],[[9,8],[0,4]]]]
[[[8,9],[[4,1],2]],[[[3,4],[4,5]],[[7,4],0]]]
[[5,[2,[2,1]]],[[5,6],[[6,2],[3,0]]]]
[[8,[0,0]],[[6,1],[9,[1,3]]]]
[[[9,[5,8]],5],[[8,[6,6]],[7,5]]]
[3,2]
[[8,[[6,3],[8,4]]],[[2,7],[8,[9,5]]]]
[[[4,[9,1]],[[3,6],[8,8]]],[[[9,0],6],[[3,7],6]]]
[[9,[[4,9],6]],[[8,2],[1,3]]]
[[[2,[4,3]],[[5,6],[7,3]]],7]
[[[[0,1],7],[[9,1],9]],[[[0,1],[6,5]],1]]
[[[7,[5,3]],[[6,6],6]],[[2,7],3]]
[[1,[[5,8],[1,7]]],[[[5,0],[4,7]],[[3,3],[3,7]]]]
[[[[8,8],[2,6]],[1,2]],[[[2,6],4],[1,[1,8]]]]
[5,[[8,[8,2]],0]]
[[6,[[5,9],[8,4]]],[7,[5,9]]]
[[7,3],[[[2,5],4],[[1,1],8]]]
[[[0,1],7],[0,8]]
[[7,[6,6]],[2,9]]
[[[[1,9],1],[[4,8],5]],[[0,[8,3]],[[0,9],[1,5]]]]
[[[0,9],[[6,7],5]],[4,[[1,1],[0,6]]]]
[[[6,1],7],[[[1,4],8],[[9,0],4]]]
[5,[3,[[0,7],[4,9]]]]
[[[[6,0],[1,5]],[[1,5],1]],[[1,[7,1]],[[6,2],7]]]
[[[9,0],8],[[[4,1],[5,4]],[4,[5,1]]]]
[3,[5,9]]
[6,[6,5]]
[[1,[8,0]],[9,0]]
[[[[1,8],3],0],[7,[[0,8],6]]]
[[[[4,2],2],3],[[2,5],[[9,2],4]]]
[[1,[[1,1],[8,4]]],[[[8,1],0],[0,2]]]
[[[[0,7],[8,7]],[9,6]],0]
[[3,7],[[1,[0,9]],[1,[7,6]]]]
[[[[3,5],[4,6]],[[7,1],[8,0]]],6]
[[7,[5,[7,7]]],[4,[5,3]]]
[1,[[[0,0],[4,6]],[7,[1,9]]]]
[[[3,7],[7,[0,6]]],[7,[5,3]]]
[[[[5,3],0],2],[[[2,7],[7,9]],[[1,4],3]]]
[[[[8,3],9],[[8,3],[7,4]]],[[4,[6,0]],[7,[3,7]]]]
[[[6,[5,0]],8],[[[4,5],3],[1,[5,9]]]]
[[7,8],[[6,8],[[8,4],[3,1]]]]
[[[2,7],[6,3]],[[0,0],4]]
[[1,[[6,5],[4,8]]],[[8,[2,7]],[[7,8],[6,8]]]]
[[[2,3],[7,7]],[0,[3,3]]]
[5,[[2,8],[2,[6,9]]]]
[[[[6,3],2],[[2,8],9]],[[[5,6],[8,0]],[[9,3],[5,0]]]]
[[[[6,2],7],[6,1]],[[[5,9],4],4]]
[[[[7,2],[0,4]],[[6,7],7]],[6,[[8,5],[9,0]]]]
[[[[9,6],8],[2,[3,7]]],6]
[[0,[[1,0],4]],[5,[[7,4],[2,4]]]]
[[[[4,4],[4,7]],[[7,4],3]],5]
[[[[8,2],[0,3]],[[7,2],1]],[[7,[1,2]],6]]
[[[3,8],[3,1]],[7,7]]
[[[6,5],[[8,7],4]],3]
[[7,[2,[2,5]]],[9,1]]
[9,2]
[[4,[2,9]],[[4,[2,9]],0]]
[[[0,2],[[2,1],[9,2]]],[[6,[8,2]],[4,[3,8]]]]
[1,[[[2,2],6],[[3,5],6]]]
[[[9,[4,8]],[1,4]],[4,[1,[9,1]]]]
[[[8,0],[[8,4],3]],9]
"""

def flatten(l0, p=[]):
    l = path(l0, p)
    if isinstance(l, list):
        for i in range(len(l)):
            if isinstance(l[i], list):
                for j in flatten(l0, p+[i]):
                    yield j
            else:
                yield p + [i]

def path(l0, ls):
    l = l0[:]
    for i in ls:
        l = l[i]
    return l

def parse(s):
    return json.loads(s)

def updateValue(l, path, newV):
    if len(path) == 1:
        l[path[0]] = newV
    else:
        updateValue(l[path[0]], path[1:], newV)

def splitL(n):
    return [n/2, n - n/2]

def regular(v):
    res = []
    if len(v) < 2:
        return range(len(v))

    for i in range(len(v)):
        if i == 0:
            if not isPair(v[0], v[1]):
                res.append(i)
        elif i == len(v) - 1:
            if not isPair(v[i],v[i-1]):
                res.append(i)
        else:
            if not isPair(v[i],v[i-1]) and not isPair(v[i], v[1+i]):
                res.append(i)

    return res

def lastReg(v, ls):
    if len(ls) == 0 or ls[0] > v:
        return -1

    for i in range(len(ls) - 1, -1, -1):
        if v > ls[i]:
            return ls[i]

    return -1

def nextReg(v, ls):
    if len(ls) == 0 or v > ls[len(ls)-1]:
        return -1

    for i in range(len(ls)):
        if ls[i] > v:
            return ls[i]

    return -1




def isPair(a, b):
    if len(a) != len(b):
        return False

    for i in range(len(a)-1):
        if a[i] != b[i]:
            return False

    return True

def explodable(l):
    v = list(flatten(l))
    return all([len(i) < 5 for i in v])

def splable(l):
    v = list(flatten(l))
    lsE = [path(l,i) for i in v]

    return all([i < 10 for i in lsE])

def explode(l0):
    l = l0[:]
    v = list(flatten(l))
    lsE = [path(l,i) for i in v]
    if all([len(i) < 5 for i in v]) and all([i < 10 for i in lsE]):
        return l

    if all([len(i) < 5 for i in v]):
        return splt(l)

    isFirst = True
    #r = regular(v)
    toSplt = []
    for i in range(len(v)):
        if len(v[i]) >= 5:
            e = lsE[i]
            if isFirst:
                if i > 0:
                    last = i - 1
                    n = lsE[last] + e
                    if last > -1:
                 #       if n < 10:
                            updateValue(l, v[last], n)
                 #       else:
                 #           updateValue(l, v[last], splitL(n))
                    if n > 9:
                        toSplt.append([v[last], splitL(n)])
            else:
                if i < len(v) - 1:
                    nxt = i + 1
                    n = lsE[nxt] + e
                    if nxt > -1:
                 #       if n < 10:
                            updateValue(l, v[nxt], n)
                 #       else:
                 #           updateValue(l, v[nxt], splitL(n))

                    if n > 9:
                        toSplt.append([v[nxt], splitL(n)])
                updateValue(l, v[i][:-1], 0)
                return explode(l)
            isFirst = not isFirst
            #print l
    return splt(l)

def splt(l0):
    l = l0[:]
    v = list(flatten(l))
    lsE = [path(l,i) for i in v]

    if all([i < 10 for i in lsE]):
        return explode(l)

    for k in range(len(v)):
        i = lsE[k]
        j = v[k]
        if i > 9:
            updateValue(l, j, splitL(i))
            l = explode(l)
            return splt(l)

def exp(l):
    return splt(explode(l))

def addL(l1, l2):
    res = []
    res.append(copy.deepcopy(l1))
    res.append(copy.deepcopy(l2))
    return splt(res)

def processL(s):
    v = [parse(i.strip()) for i in s.strip().splitlines()]
    l1 = v[0]
    for e in range(1, len(v)):
        l1 = addL(l1, v[e])
    return l1

def q2Process(s):
    v = [parse(i.strip()) for i in s.strip().splitlines()]
    res = []
    for i in range(len(v)):
        for j in range(len(v)):
            if i != j:
                x = mag(addL(v[i], v[j]))
                if x == 4005:
                    print v[i]
                    print v[j]
                res.append(x)
    res.sort()
    print res
    print max(res)

def mag(l):
    if not isinstance(l, list):
        return l

    lf = l[0]
    rt = l[1]
    return mag(lf) * 3 + mag(rt) * 2

if __name__ == '__main__':
    s = """[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
[[[5,[2,8]],4],[5,[[9,9],0]]]
[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
[[[[5,4],[7,7]],8],[[8,3],8]]
[[9,3],[[9,9],[6,[4,9]]]]
[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]"""
    #print splt([[[[4, 0], [5, 4]], [[7, 0], [15, 5]]], [10, [[11, 9], [0, [11, 8]]]]])
   # print exp(parse("[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]"))
    # [2445, 2510, 2565, 2661, 2690, 2691, 2709, 2760, 2817, 2820, 2834, 2856, 2879, 2886, 2904, 2906, 2927, 2959, 2964, 3009, 3012, 3036, 3036, 3039, 3066, 3068, 3084, 3084, 3122, 3129, 3135, 3154, 3156, 3192, 3198, 3210, 3225, 3228, 3233, 3234, 3252, 3273, 3281, 3282, 3302, 3318, 3334, 3335, 3336, 3363, 3381, 3381, 3399, 3408, 3411, 3414, 3414, 3423, 3444, 3446, 3462, 3471, 3478, 3483, 3491, 3518, 3523, 3531, 3550, 3558, 3579, 3603, 3609, 3627, 3627, 3630, 3657, 3675, 3680, 3712, 3735, 3783, 3792, 3877, 3893, 3903, 3947, 3957, 3979, 4005]
    print (processL(s))
    print mag(processL(s))
    q2Process(input)

